berarti decorator teh aya 5 coy
- decorator class
- decorator propery
- decorator accessor
- decorator method
- decorator parameter


naaahhh :

function Log(target: any, propertyName: string | Symbol) {
  console.log('Property decorator!');
  console.log('target');
  console.log(target);
  console.log('propertyName');
  console.log(propertyName);
}

function Log2(target: any, name: string, descriptor: PropertyDescriptor) {
  console.log('Accessor Decorator!');
  console.log('target', target);
  console.log('name', name);
  console.log('descriptor ' + typeof descriptor, descriptor);
}

function Log3(target: any, name: string | Symbol, descriptor: PropertyDescriptor) {
  console.log('Method Decorator!');
  console.log(target);
  console.log(name);
  console.log(descriptor);
}

function Log4(target: any, name: string | Symbol, position: number) {
  console.log('Parameter Decorator!');
  console.log(target);
  console.log(name);
  console.log(position);
}

class Product {
  @Log
  title: string;
  private _price: number;

  constructor(t: string, p: number) {
    this.title = t;
    this._price = p;
  }

  @Log2
  set price(val: number) {
    if (val < 0) {
      throw new Error('Price must be not 0');
    }

    this._price = val;
  }

  @Log2
  getPriceWithTax(@Log4 tax: number) {
    return this._price * (1 + tax);
  }
}